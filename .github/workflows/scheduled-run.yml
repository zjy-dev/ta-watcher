name: TA Watcher Scheduled Run

on:
  schedule:
    # 每六小时运行一次：北京时间0:12、6:12、12:12、18:12（对应UTC时间16:12、22:12、4:12、10:12）
    - cron: "12 16,22,4,10 * * *"

  # Allow manual trigger for testing (but not immediate after push)
  workflow_dispatch:

jobs:
  scheduled-run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          clean: true # 强制清理工作目录
          fetch-depth: 0 # 获取完整历史确保最新
          persist-credentials: false # 避免凭据持久化

      - name: Complete workspace cleanup
        run: |
          echo "🧹 Performing complete workspace cleanup..."
          rm -rf ~/.cache/go-build || true
          rm -rf ~/go/pkg/mod || true
          rm -rf ./bin/ || true
          rm -rf ./logs/ || true
          rm -rf ./.env* || true
          git reset --hard HEAD
          git clean -fdx
          echo "✅ Workspace completely cleaned"

      - name: Verify fresh files
        run: |
          echo "📋 Verifying fresh configuration files..."
          ls -la config*.yaml || echo "No config files found"
          echo "📄 config.yaml content (first 10 lines):"
          head -10 config.yaml || echo "config.yaml not found"

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24" # Use the latest stable Go version

      # 禁用缓存，强制重新下载所有依赖
      - name: Force clean Go modules
        run: |
          echo "🔄 Force cleaning Go modules and build cache..."
          go clean -modcache || true
          go clean -cache || true
          echo "✅ Go caches cleared"

      - name: Download dependencies (force fresh)
        run: |
          echo "📦 Force downloading fresh dependencies..."
          go mod download -x
          go mod verify
          echo "✅ Fresh dependencies downloaded and verified"

      - name: Build application
        run: go build -ldflags='-w -s' -o bin/ta-watcher ./cmd/watcher

      - name: Run TA Watcher (Scheduled)
        env:
          # Email configuration (set these as repository secrets)
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}

          # Optional webhook configurations
          FEISHU_WEBHOOK_URL: ${{ secrets.FEISHU_WEBHOOK_URL }}
          WECHAT_WEBHOOK_URL: ${{ secrets.WECHAT_WEBHOOK_URL }}

          # App settings
          TZ: UTC
          LOG_LEVEL: info
        run: |
          echo "⏰ Starting TA Watcher scheduled run at $(date)"
          echo "🌍 Beijing Time: $(TZ=Asia/Shanghai date)"
          echo "⏱️  Run schedule: Every 6 hours at Beijing Time 0:12, 6:12, 12:12, 18:12"
          echo "🕘 UTC Time: 16:12, 22:12, 4:12, 10:12"

          # Check if secrets are available
          if [ -z "$SMTP_HOST" ] || [ -z "$SMTP_USERNAME" ] || [ -z "$SMTP_PASSWORD" ] || [ -z "$FROM_EMAIL" ] || [ -z "$TO_EMAIL" ]; then
            echo "❌ Error: Required email secrets are not configured!"
            echo "Please configure the following repository secrets:"
            echo "  - SMTP_HOST"
            echo "  - SMTP_USERNAME" 
            echo "  - SMTP_PASSWORD"
            echo "  - FROM_EMAIL"
            echo "  - TO_EMAIL"
            exit 1
          fi

          echo "✅ All required secrets are configured"
          echo "📧 Email notifications will be sent to: ${TO_EMAIL}"

          ./bin/ta-watcher --single-run --config config.yaml

          echo "✅ Scheduled run completed at $(date)"

          # 显示日志摘要
          echo ""
          echo "📋 Log Summary:"
          if [ -d "logs" ] && [ "$(ls -A logs)" ]; then
            echo "✅ Log files created:"
            ls -la logs/
            echo ""
            echo "📄 Latest log content (last 20 lines):"
            tail -20 logs/ta-watcher_*.log | head -20
          else
            echo "⚠️  No log files found"
          fi

      - name: Upload logs (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ta-watcher-logs-${{ github.run_number }}
          path: logs/
          retention-days: 7
          if-no-files-found: ignore
